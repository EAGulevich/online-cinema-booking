/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Cinema,
  ErrorResponse,
  MovieSession
} from '.././models';

import getCinemasMutator from '../../api/custom-instance';
import getCinemasCinemaIdSessionsMutator from '../../api/custom-instance';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤
 */
export const getCinemas = (
    
 signal?: AbortSignal
) => {
      
      
      return getCinemasMutator<Cinema[]>(
      {url: `/cinemas`, method: 'GET', signal
    },
      );
    }
  



export const getGetCinemasQueryKey = () => {
    return [
    `/cinemas`
    ] as const;
    }

    
export const getGetCinemasQueryOptions = <TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCinemasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCinemas>>> = ({ signal }) => getCinemas(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCinemasQueryResult = NonNullable<Awaited<ReturnType<typeof getCinemas>>>
export type GetCinemasQueryError = unknown


export function useGetCinemas<TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCinemas>>,
          TError,
          Awaited<ReturnType<typeof getCinemas>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCinemas<TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCinemas>>,
          TError,
          Awaited<ReturnType<typeof getCinemas>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCinemas<TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤
 */

export function useGetCinemas<TData = Awaited<ReturnType<typeof getCinemas>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemas>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCinemasQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å—ã –¥–ª—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞
 */
export const getCinemasCinemaIdSessions = (
    cinemaId: number,
 signal?: AbortSignal
) => {
      
      
      return getCinemasCinemaIdSessionsMutator<MovieSession[]>(
      {url: `/cinemas/${cinemaId}/sessions`, method: 'GET', signal
    },
      );
    }
  



export const getGetCinemasCinemaIdSessionsQueryKey = (cinemaId?: number,) => {
    return [
    `/cinemas/${cinemaId}/sessions`
    ] as const;
    }

    
export const getGetCinemasCinemaIdSessionsQueryOptions = <TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(cinemaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCinemasCinemaIdSessionsQueryKey(cinemaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>> = ({ signal }) => getCinemasCinemaIdSessions(cinemaId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(cinemaId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCinemasCinemaIdSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>>
export type GetCinemasCinemaIdSessionsQueryError = ErrorResponse


export function useGetCinemasCinemaIdSessions<TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(
 cinemaId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>,
          TError,
          Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCinemasCinemaIdSessions<TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(
 cinemaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>,
          TError,
          Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCinemasCinemaIdSessions<TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(
 cinemaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å—ã –¥–ª—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞
 */

export function useGetCinemasCinemaIdSessions<TData = Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError = ErrorResponse>(
 cinemaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCinemasCinemaIdSessions>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCinemasCinemaIdSessionsQueryOptions(cinemaId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



