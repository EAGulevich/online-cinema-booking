/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  PostRegister201,
  PostRegisterBody
} from '.././models';

import postRegisterMutator from '../../api/custom-instance';




/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞.
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const postRegister = (
    postRegisterBody: PostRegisterBody,
 signal?: AbortSignal
) => {
      
      
      return postRegisterMutator<PostRegister201>(
      {url: `/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRegisterBody, signal
    },
      );
    }
  


export const getPostRegisterMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,{data: PostRegisterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,{data: PostRegisterBody}, TContext> => {

const mutationKey = ['postRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRegister>>, {data: PostRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postRegister>>>
    export type PostRegisterMutationBody = PostRegisterBody
    export type PostRegisterMutationError = ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePostRegister = <TError = ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRegister>>, TError,{data: PostRegisterBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postRegister>>,
        TError,
        {data: PostRegisterBody},
        TContext
      > => {

      const mutationOptions = getPostRegisterMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    