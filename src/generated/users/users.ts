/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Booking,
  ErrorResponse
} from '.././models';

import getMeBookingsMutator from '../../api/custom-instance';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–∏–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getMeBookings = (
    
 signal?: AbortSignal
) => {
      
      
      return getMeBookingsMutator<Booking[]>(
      {url: `/me/bookings`, method: 'GET', signal
    },
      );
    }
  



export const getGetMeBookingsQueryKey = () => {
    return [
    `/me/bookings`
    ] as const;
    }

    
export const getGetMeBookingsQueryOptions = <TData = Awaited<ReturnType<typeof getMeBookings>>, TError = ErrorResponse | ErrorResponse>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBookings>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeBookingsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeBookings>>> = ({ signal }) => getMeBookings(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeBookings>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeBookingsQueryResult = NonNullable<Awaited<ReturnType<typeof getMeBookings>>>
export type GetMeBookingsQueryError = ErrorResponse | ErrorResponse


export function useGetMeBookings<TData = Awaited<ReturnType<typeof getMeBookings>>, TError = ErrorResponse | ErrorResponse>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBookings>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBookings>>,
          TError,
          Awaited<ReturnType<typeof getMeBookings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeBookings<TData = Awaited<ReturnType<typeof getMeBookings>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBookings>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeBookings>>,
          TError,
          Awaited<ReturnType<typeof getMeBookings>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMeBookings<TData = Awaited<ReturnType<typeof getMeBookings>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBookings>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetMeBookings<TData = Awaited<ReturnType<typeof getMeBookings>>, TError = ErrorResponse | ErrorResponse>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeBookings>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeBookingsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



