/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Cinema Backend API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  MovieSessionDetails,
  PostMovieSessionsMovieSessionIdBookings200,
  PostMovieSessionsMovieSessionIdBookingsBody
} from '.././models';

import getMovieSessionsMovieSessionIdMutator from '../../api/custom-instance';
import postMovieSessionsMovieSessionIdBookingsMutator from '../../api/custom-instance';




/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∞–Ω—Å–µ, –≤–∫–ª—é—á–∞—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞.
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ–∞–Ω—Å–∞
 */
export const getMovieSessionsMovieSessionId = (
    movieSessionId: number,
 signal?: AbortSignal
) => {
      
      
      return getMovieSessionsMovieSessionIdMutator<MovieSessionDetails>(
      {url: `/movieSessions/${movieSessionId}`, method: 'GET', signal
    },
      );
    }
  



export const getGetMovieSessionsMovieSessionIdQueryKey = (movieSessionId?: number,) => {
    return [
    `/movieSessions/${movieSessionId}`
    ] as const;
    }

    
export const getGetMovieSessionsMovieSessionIdQueryOptions = <TData = Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError = ErrorResponse>(movieSessionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMovieSessionsMovieSessionIdQueryKey(movieSessionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>> = ({ signal }) => getMovieSessionsMovieSessionId(movieSessionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(movieSessionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMovieSessionsMovieSessionIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>>
export type GetMovieSessionsMovieSessionIdQueryError = ErrorResponse


export function useGetMovieSessionsMovieSessionId<TData = Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError = ErrorResponse>(
 movieSessionId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>,
          TError,
          Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMovieSessionsMovieSessionId<TData = Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError = ErrorResponse>(
 movieSessionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>,
          TError,
          Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMovieSessionsMovieSessionId<TData = Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError = ErrorResponse>(
 movieSessionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ–∞–Ω—Å–∞
 */

export function useGetMovieSessionsMovieSessionId<TData = Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError = ErrorResponse>(
 movieSessionId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMovieSessionsMovieSessionId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMovieSessionsMovieSessionIdQueryOptions(movieSessionId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –ë—Ä–æ–Ω–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @summary –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞ –Ω–∞ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å
 */
export const postMovieSessionsMovieSessionIdBookings = (
    movieSessionId: number,
    postMovieSessionsMovieSessionIdBookingsBody: PostMovieSessionsMovieSessionIdBookingsBody,
 signal?: AbortSignal
) => {
      
      
      return postMovieSessionsMovieSessionIdBookingsMutator<PostMovieSessionsMovieSessionIdBookings200>(
      {url: `/movieSessions/${movieSessionId}/bookings`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMovieSessionsMovieSessionIdBookingsBody, signal
    },
      );
    }
  


export const getPostMovieSessionsMovieSessionIdBookingsMutationOptions = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMovieSessionsMovieSessionIdBookings>>, TError,{movieSessionId: number;data: PostMovieSessionsMovieSessionIdBookingsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postMovieSessionsMovieSessionIdBookings>>, TError,{movieSessionId: number;data: PostMovieSessionsMovieSessionIdBookingsBody}, TContext> => {

const mutationKey = ['postMovieSessionsMovieSessionIdBookings'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMovieSessionsMovieSessionIdBookings>>, {movieSessionId: number;data: PostMovieSessionsMovieSessionIdBookingsBody}> = (props) => {
          const {movieSessionId,data} = props ?? {};

          return  postMovieSessionsMovieSessionIdBookings(movieSessionId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMovieSessionsMovieSessionIdBookingsMutationResult = NonNullable<Awaited<ReturnType<typeof postMovieSessionsMovieSessionIdBookings>>>
    export type PostMovieSessionsMovieSessionIdBookingsMutationBody = PostMovieSessionsMovieSessionIdBookingsBody
    export type PostMovieSessionsMovieSessionIdBookingsMutationError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse

    /**
 * @summary –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞ –Ω–∞ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å
 */
export const usePostMovieSessionsMovieSessionIdBookings = <TError = ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse | ErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMovieSessionsMovieSessionIdBookings>>, TError,{movieSessionId: number;data: PostMovieSessionsMovieSessionIdBookingsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postMovieSessionsMovieSessionIdBookings>>,
        TError,
        {movieSessionId: number;data: PostMovieSessionsMovieSessionIdBookingsBody},
        TContext
      > => {

      const mutationOptions = getPostMovieSessionsMovieSessionIdBookingsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    